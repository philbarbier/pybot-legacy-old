#!/usr/bin/env php
<?php

class Irc {

    public function __construct($config) {
        $this->config = $config;
        $this->server = $config['irc_server'];
        $this->version = $config['version'];
        $this->port = $config['irc_port'];
        $this->channels = $config['irc_channels'];
        $this->handle = $config['irc_handle'];
        $this->socket = fsockopen($this->server, $this->port);
        $this->firstrun = false;
        $this->connection = new Mongo($this->config['mongodb']);
        $this->collection = $this->connection->pybot->message;
        $this->main();
    }

    private function set_firstrun($arg) {
        if (is_bool($arg)) $this->firstrun = $arg;
    }

    private function get_firstrun() {
        return $this->firstrun;
    }

    public function main() {
        $this->write("NICK $this->handle");
        $this->write("USER $this->handle 8 *  : $this->handle");

        while (!feof($this->socket)) {
            $raw = $this->read();
            $msg = $this->parse_raw($raw);

            // Print message debug to stdout
            if ($this->config['debug']) { print_r($msg); }
            
            $params = @$this->parse_command($msg['message']);
	    $data = $this->collection->findOne();
	    $id = @$data['_id'];
	    $message = @$data['message'];
	    if ($message) {
		// Push message to channel and remove it from the queue
		$this->collection->remove(array('_id' => $id));
		$this->write("PRIVMSG #torontotalk :$message");
	    }
	    sleep(1);
        }
    }

    public function command($params) {
        $module = $this->module;
        $message = $params['message'];
        $parts = explode(" ", $message);
        $command = @$parts[0];
        if (method_exists($module, $command)) {
            return $module->$command($params);
        }
    }

    public function parse_raw($str) {

        $matches = null;

        $regex = '{
          :([^!]++)!
          ([^\s]++)\s++
          ([^\s]++)\s++
          :?+([^\s]++)\s*+
          (?:[:+-]++(.*+))? 
        }x';

        preg_match($regex, $str, $matches);

        $parts = explode(' ', $str);

        if ($parts[0] == 'PING') {
            $this->write("PONG ".$parts[1]);
        }
        if (isset($parts[1]) && is_numeric($parts[1])) {
            // we should maybe parse for every code here, that way
            // we're able to tell the IRC state better
            if ($parts[1]==422) {
                //ready to join
                $this->set_firstrun(true);
            }
        }
        if ($this->get_firstrun()) {
            foreach ($this->channels as $channel) {
                $this->write("JOIN $channel");
            }
            // ensure we're in the default channel
            $this->write("JOIN " . $this->config['default_chan']);
            $this->write("PRIVMSG", $this->config['default_chan'], 'Loading pybot version : ' . $this->version);
            // print out current revision
            $this->set_firstrun(false);
        }


        $result = null;

        if (!empty($matches)) {
            $result = array(
                'user' => trim(@$matches[1]),
                'command' => trim(@$matches[3]),
                'channel' => trim(@$matches[4]),
                'message' => trim(@$matches[5]),
                'time' => time()
            );
        }
        return $result;
    }

    public function read() {
        return fgets($this->socket, 1024);
    }

    public function write($message) {
        return fwrite($this->socket, $message."\r\n\r\n", strlen($message."\r\n\r\n"));
    }

    public function parse_command($str) {
        // get command name
        $matches = array();
        $matched =  preg_match('/^\S+/',$str,&$matches);
        $command = $matches[0];

        // get raw and unnamed args
        $matched = preg_match_all('/\s+((\"[^\"]*\")|(\S+))/',$str,&$matches,PREG_SET_ORDER);
        
        $unnamed_args = array();
        $found_named = false;
        foreach ($matches as $match) {
            if (preg_match('/^--/',$match[1]) || $found_named) {
               $found_named = !$found_named;
               continue;
            }
            array_push($unnamed_args,str_replace('"',"",$match[1]));
        }   
        $arg1 = str_replace('"','',$matches[3]);
        // get named args
        $matches = array();
        $matched = preg_match_all('/--(\S+)\s+((\"[^\"]*\")|([^\"]\S*))/',$str,&$matches,PREG_SET_ORDER);
        $named_args = array();

        foreach ($matches as $match) {
            $named_args[$match[1]] = str_replace('"','',$match[2]);
        }

        $command = array('command'=>$command,'arg1'=>join(' ',$unnamed_args),'uargs'=>$unnamed_args,'raw'=>join(' ',$unnamed_args));
        return array_merge($command,$named_args);
    }
}

$config = array(
    'mongodb' => 'mongodb://pybot:tehpybot@linus.mongohq.com:10092/pybot',
    'irc_server' => 'localhost',
    'irc_port' => 6667,
    'irc_handle' => 'mcfriendly',
    'irc_channels' => array(
        '#torontotalk'
    ),
    'default_chan' => '#torontotalk',
    'log_stats' => true,
    'log_history' => true,
    'debug' => true,
    'banned_users' => array(
        'igor'
    )
);
$a = new Irc($config);
